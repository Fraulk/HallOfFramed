[{"C:\\dev\\GitHub\\jim-framed\\src\\App.js":"1","C:\\dev\\GitHub\\jim-framed\\src\\api\\request.js":"2","C:\\dev\\GitHub\\jim-framed\\src\\utils\\utils.js":"3","C:\\dev\\GitHub\\jim-framed\\src\\index.js":"4","C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageGrid.jsx":"5","C:\\dev\\GitHub\\jim-framed\\src\\pages\\ImageGridContainer.jsx":"6","C:\\dev\\GitHub\\jim-framed\\src\\components\\SiteHeader.jsx":"7","C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageNav.jsx":"8","C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageViewer.jsx":"9","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js":"10","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js":"11","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js":"12","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js":"13","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx":"14","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx":"15","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx":"16","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx":"17","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js":"18"},{"size":883,"mtime":1611499489472,"results":"19","hashOfConfig":"20"},{"size":199,"mtime":1611343564209,"results":"21","hashOfConfig":"20"},{"size":592,"mtime":1611387051302,"results":"22","hashOfConfig":"20"},{"size":500,"mtime":1611341448793,"results":"23","hashOfConfig":"20"},{"size":5219,"mtime":1611459079025,"results":"24","hashOfConfig":"20"},{"size":3584,"mtime":1611464567003,"results":"25","hashOfConfig":"20"},{"size":2187,"mtime":1611384337347,"results":"26","hashOfConfig":"20"},{"size":2486,"mtime":1611462722902,"results":"27","hashOfConfig":"20"},{"size":1076,"mtime":1611495371482,"results":"28","hashOfConfig":"20"},{"size":500,"mtime":1611341448793,"results":"29","hashOfConfig":"30"},{"size":883,"mtime":1611499489472,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1611341448793,"results":"32","hashOfConfig":"30"},{"size":199,"mtime":1611343564209,"results":"33","hashOfConfig":"30"},{"size":3584,"mtime":1611464567003,"results":"34","hashOfConfig":"30"},{"size":5219,"mtime":1611459079025,"results":"35","hashOfConfig":"30"},{"size":2486,"mtime":1611462722902,"results":"36","hashOfConfig":"30"},{"size":1076,"mtime":1611495371482,"results":"37","hashOfConfig":"30"},{"size":592,"mtime":1611387051302,"results":"38","hashOfConfig":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3wubio",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1aoc0nl",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\dev\\GitHub\\jim-framed\\src\\App.js",[],"C:\\dev\\GitHub\\jim-framed\\src\\api\\request.js",[],"C:\\dev\\GitHub\\jim-framed\\src\\utils\\utils.js",["79"],"import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions(container) {\n  const maxWidth = container.clientWidth;\n  \n  return {\n    maxWidth\n  };\n}\n\nexport default function useWindowDimensions(container) {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(container));\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions(container));\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","C:\\dev\\GitHub\\jim-framed\\src\\index.js",[],["80","81"],"C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageGrid.jsx",["82"],"import useWindowDimensions from '../utils/utils';\r\n\r\nconst ImageGrid = ({\r\n        className, \r\n        images, \r\n        rowTargetHeight = 400, \r\n        borderOffset = 5, \r\n        container,\r\n        onClick\r\n    }) => {\r\n\r\n    let { maxWidth } = useWindowDimensions(container);\r\n\r\n    const processImages = () => {\r\n        const processedImages = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n            let width = parseInt(images[i].width);\r\n            const height = parseInt(images[i].height);\r\n            width = width * (rowTargetHeight / height); \r\n\r\n            const image = {\r\n                'id': images[i].id,\r\n                'author': images[i].author,\r\n                'authorsAvatarUrl': images[i].authorsAvatarUrl,\r\n                'data': images[i].date,\r\n                'gameName': images[i].gameName,\r\n                'score': images[i].score,\r\n                'fullWidth': images[i].width,\r\n                'fullHeight': images[i].height,\r\n                'shotUrl': images[i].shotUrl,\r\n                'thumbnailUrl': images[i].thumbnailUrl,\r\n                'width': width,\r\n                'height': rowTargetHeight,\r\n            }\r\n\r\n            processedImages.push(image);\r\n        }\r\n\r\n        return processedImages;\r\n    }\r\n\r\n    const makeSmaller = (image, amount) => {\r\n        amount = amount || 1;\r\n\r\n        const newHeight = image.height - amount;\r\n        image.width = (image.width * (newHeight / image.height));\r\n        image.height = newHeight;\r\n\r\n\r\n        return image;\r\n    };\r\n\r\n    const getCumulativeWidth = (images) => {\r\n        let width = 0;\r\n\r\n        for(let i = 0; i < images.length; i++) {\r\n            width += images[i].width;\r\n        }\r\n\r\n        width += (images.length-1) * borderOffset;\r\n\r\n        return width;\r\n    };\r\n\r\n    const buildRows = () => {\r\n        let currentRow = 0;\r\n        let currentWidth = 0;\r\n        let imageCounter = 0;\r\n        const rows = [];\r\n        const processedImages = processImages();\r\n\r\n        while(processedImages[imageCounter]) {\r\n            if(currentWidth >= maxWidth) {\r\n                currentRow++;\r\n                currentWidth = 0;\r\n            }\r\n            if(!rows[currentRow]) {\r\n                rows[currentRow] = [];\r\n            }\r\n\r\n            rows[currentRow].push(processedImages[imageCounter]);\r\n            currentWidth += processedImages[imageCounter].width;\r\n\r\n            imageCounter++;\r\n        };\r\n\r\n        return rows;\r\n    }\r\n\r\n    const normalizeImage = (image) => {\r\n        image.width =  parseInt(image.width);\r\n        image.height = parseInt(image.height);\r\n\r\n        return image;\r\n    };\r\n\r\n    const normalizeImages = (images) => {\r\n        for(let i = 0; i < images.length; i++) {\r\n            normalizeImage(images[i]);\r\n        }\r\n\r\n        return images;\r\n    };\r\n\r\n    const fitImagesInRow = (images) => {\r\n        while(getCumulativeWidth(images) > maxWidth) {\r\n            for(let i = 0; i < images.length; i++) {\r\n                images[i] = makeSmaller(images[i]);\r\n            }\r\n        };\r\n\r\n        return images;\r\n    }\r\n\r\n    const renderGrid = (rows) => {\r\n        return (\r\n        <div className={className}>\r\n            {rows.map((row, index) => {\r\n                return (\r\n                    <div \r\n                        key={index} \r\n                        className=\"image-row\" \r\n                    >\r\n                        {row.map((image, imageIndex) => {\r\n                            return (\r\n                                <img \r\n                                    key={imageIndex} \r\n                                    src={image.thumbnailUrl} \r\n                                    style={{\r\n                                        marginRight: borderOffset,\r\n                                        marginBottom: borderOffset,\r\n                                        width: Math.ceil(image.width), \r\n                                        height:image.height,\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => onClick(image, imageIndex)} \r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        );\r\n    };\r\n\r\n    const buildGrid = () => {\r\n        const rows = buildRows();\r\n\r\n        for(let i = 0; i < rows.length; i++) {\r\n            rows[i] = fitImagesInRow(rows[i]);\r\n\r\n            rows[i] = normalizeImages(rows[i]);\r\n\r\n            const difference = (maxWidth - getCumulativeWidth(rows[i]));\r\n            const amountOfImages = rows[i].length;\r\n\r\n            if(amountOfImages > 1 && difference < 10) {\r\n                const addToEach = difference / amountOfImages;\r\n                for(let n = 0; n < rows[i].length; n++) {\r\n                    rows[i][n].width += addToEach;\r\n                }\r\n\r\n                rows[i] = normalizeImages(rows[i]);\r\n\r\n\r\n                rows[i][rows[i].length-1].width += (maxWidth - getCumulativeWidth(rows[i]));\r\n            }\r\n        }\r\n\r\n        return renderGrid(rows)\r\n    }\r\n\r\n    return buildGrid();\r\n}\r\n\r\nexport default ImageGrid;","C:\\dev\\GitHub\\jim-framed\\src\\pages\\ImageGridContainer.jsx",["83","84"],"C:\\dev\\GitHub\\jim-framed\\src\\components\\SiteHeader.jsx",[],"C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageNav.jsx",[],"C:\\dev\\GitHub\\jim-framed\\src\\components\\ImageViewer.jsx",["85","86"],"import React, {useState} from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst ImageViewer = ({image = {}, show, onClose}) => {\r\n\r\n    const visibleClass = show ? 'is-visible' : undefined;\r\n\r\n    return (\r\n        <div className={classNames('image-viewer', visibleClass)} onClick={onClose}> \r\n            <div className=\"image-viewer-content\">\r\n                {image && (\r\n                    <>\r\n                        <img src={image.shotUrl} onClick={(event) => {event.stopPropagation();}}/>\r\n                        <div className=\"author\" onClick={(event) => {event.stopPropagation();}}>\r\n                            {/* <img src={image.authorsAvatarUrl} alt=\"avatar\" /> */}\r\n                            <div><span>by</span> <strong>{image.author}</strong></div>\r\n                            <div className=\"title\">{image.gameName}</div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <button className=\"close\" onClick={onClose}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageViewer;","C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js",[],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js",[],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js",[],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js",[],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx",["87","88"],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx",["89"],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx",[],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx",["90","91"],"C:\\dev\\GitHub\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js",["92"],{"ruleId":"93","severity":1,"message":"94","line":21,"column":6,"nodeType":"95","endLine":21,"endColumn":8,"suggestions":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":127,"column":33,"nodeType":"103","endLine":138,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":14,"column":12,"nodeType":"106","messageId":"107","endLine":14,"endColumn":23},{"ruleId":"93","severity":1,"message":"108","line":102,"column":8,"nodeType":"95","endLine":102,"endColumn":45,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":1,"column":16,"nodeType":"106","messageId":"107","endLine":1,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":13,"column":25,"nodeType":"103","endLine":13,"endColumn":99},{"ruleId":"104","severity":1,"message":"105","line":14,"column":12,"nodeType":"106","messageId":"107","endLine":14,"endColumn":23},{"ruleId":"93","severity":1,"message":"108","line":102,"column":8,"nodeType":"95","endLine":102,"endColumn":45,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"102","line":127,"column":33,"nodeType":"103","endLine":138,"endColumn":35},{"ruleId":"104","severity":1,"message":"110","line":1,"column":16,"nodeType":"106","messageId":"107","endLine":1,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":13,"column":25,"nodeType":"103","endLine":13,"endColumn":99},{"ruleId":"93","severity":1,"message":"94","line":21,"column":6,"nodeType":"95","endLine":21,"endColumn":8,"suggestions":"112"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'container'. Either include it or remove the dependency array. If 'setWindowDimensions' needs the current value of 'container', you can also switch to useReducer instead of useState and read 'container' in the reducer.","ArrayExpression",["113"],"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'viewerIndex' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'filterImages'. Either include it or remove the dependency array.",["116"],"'useState' is defined but never used.",["117"],["118"],{"desc":"119","fix":"120"},"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"119","fix":"124"},"Update the dependencies array to be: [container]",{"range":"125","text":"126"},"Update the dependencies array to be: [data, filterIndex, type, searchTerm, filterImages]",{"range":"127","text":"128"},{"range":"129","text":"128"},{"range":"130","text":"126"},[558,560],"[container]",[2785,2822],"[data, filterIndex, type, searchTerm, filterImages]",[2785,2822],[558,560]]