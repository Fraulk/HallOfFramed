[{"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js":"1","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js":"2","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js":"3","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js":"4","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx":"5","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx":"6","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx":"7","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx":"8","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js":"9","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\assets\\svgIcons.jsx":"10"},{"size":517,"mtime":1611515395166,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1611515395166,"results":"13","hashOfConfig":"12"},{"size":922,"mtime":1611515395163,"results":"14","hashOfConfig":"12"},{"size":199,"mtime":1611515395164,"results":"15","hashOfConfig":"12"},{"size":4344,"mtime":1611565404707,"results":"16","hashOfConfig":"12"},{"size":5277,"mtime":1611565404706,"results":"17","hashOfConfig":"12"},{"size":1567,"mtime":1611569623850,"results":"18","hashOfConfig":"12"},{"size":2896,"mtime":1611565404706,"results":"19","hashOfConfig":"12"},{"size":615,"mtime":1611515395167,"results":"20","hashOfConfig":"12"},{"size":2327,"mtime":1611565404705,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1pefiyx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js",[],["45","46"],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx",["47"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport ImageGrid from '../components/ImageGrid';\r\nimport ImageNav from '../components/ImageNav';\r\nimport ImageViewer from '../components/ImageViewer';\r\n\r\nconst ImageGridContainer = ({data}) => {\r\n    const sortOptions = [\r\n        {\r\n            label: 'Date',\r\n            key: 'date',\r\n        },\r\n        {\r\n            label: 'Reactions',\r\n            key: 'score',\r\n        }\r\n    ]\r\n\r\n    const [imageData, setImageData] = useState([]);\r\n    const [sortOption, setSortOption] = useState(sortOptions[0]);\r\n    const [type, setType] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showViewer, setShowViewer] = useState(false);\r\n    const [viewerSrc, setViewerSrc] = useState({})\r\n    const [isReverse, setIsReverse] = useState(false);\r\n\r\n    const handleSortChange = (option) => {\r\n        if (option.key === sortOption.key) {\r\n            setIsReverse((current) => !current);\r\n        } else {\r\n            setIsReverse(false);\r\n            setSortOption(option)\r\n        }\r\n    }\r\n\r\n    const handleTypeChange = (type) => {\r\n        setType(type);\r\n    }\r\n\r\n    const handleSearchChange = (keyword) => {\r\n        setSearchTerm(keyword)\r\n    }\r\n\r\n    const handleImageClick = (image) => {\r\n        setViewerSrc(image);\r\n        setShowViewer(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setViewerSrc({});\r\n        setShowViewer(false);\r\n    }\r\n\r\n    const searchData = (data) => {\r\n        if (searchTerm?.length < 3) {\r\n            return data;\r\n        }\r\n\r\n        const results = data.filter((obj) => {\r\n            return Object.keys(obj).reduce((acc, curr) => {\r\n                return acc || obj[curr].toString().toLowerCase().includes(searchTerm.toLowerCase());\r\n            }, false);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    const filterImages = (images) => {\r\n        let results = images;\r\n        const key = sortOption.key;\r\n\r\n        let sortMethod = (a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)\r\n        if (isReverse) {\r\n            sortMethod = (a,b) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0)\r\n        } \r\n        results = images.sort(sortMethod);\r\n\r\n        if (type === 'Wide') {\r\n            results = results.filter(item => item.width >= item.height);\r\n        } else if (type === 'Portrait') {\r\n            results = results.filter(item => item.width <= item.height);\r\n        }\r\n\r\n        // apply search\r\n\r\n        return searchData(results);\r\n    }\r\n\r\n    const selectPreviousImage = (event) => {\r\n        event.stopPropagation();\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index - 1 >= 0) {\r\n            setViewerSrc(imageData[index-1]);\r\n        }\r\n    }\r\n\r\n    const selectNextImage = (event) => {\r\n        event.stopPropagation();\r\n        const index = imageData.findIndex((e) => e.id === viewerSrc.id);\r\n        if (index + 1 <= imageData.length) {\r\n            setViewerSrc(imageData[index+1]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length) {\r\n            const images = filterImages(data.slice());\r\n\r\n            setImageData(images)\r\n        }\r\n    }, [data, sortOption, type, searchTerm, isReverse])\r\n\r\n    const container = document.querySelector('.image-grid');\r\n\r\n    return (\r\n        <div style={{ margin: '0 auto'}} className=\"home\">\r\n            <ImageNav \r\n                className={showViewer ? 'hidden' : ''}\r\n                options={sortOptions}\r\n                reverseSort={isReverse}\r\n                updateSort={handleSortChange} \r\n                updateType={handleTypeChange}\r\n                updateSearch={handleSearchChange}\r\n            />\r\n            {imageData && container && (\r\n                <ImageGrid \r\n                    images={imageData} \r\n                    rowTargetHeight={300} \r\n                    container={container} \r\n                    onClick={handleImageClick}\r\n                />\r\n            )}\r\n            <ImageViewer \r\n                image={viewerSrc} \r\n                show={showViewer} \r\n                onClose={handleClose} \r\n                data={imageData}\r\n                onPrev={selectPreviousImage}\r\n                onNext={selectNextImage}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ImageGridContainer;","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js",["48"],"import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions(container) {\r\n  const maxWidth = container.clientWidth;\r\n  \r\n  return {\r\n    maxWidth\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions(container) {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(container));\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions(container));\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\assets\\svgIcons.jsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":111,"column":8,"nodeType":"55","endLine":111,"endColumn":55,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":21,"column":6,"nodeType":"55","endLine":21,"endColumn":8,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterImages'. Either include it or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has a missing dependency: 'container'. Either include it or remove the dependency array. If 'setWindowDimensions' needs the current value of 'container', you can also switch to useReducer instead of useState and read 'container' in the reducer.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [data, sortOption, type, searchTerm, isReverse, filterImages]",{"range":"67","text":"68"},"Update the dependencies array to be: [container]",{"range":"69","text":"70"},[3210,3257],"[data, sortOption, type, searchTerm, isReverse, filterImages]",[578,580],"[container]"]