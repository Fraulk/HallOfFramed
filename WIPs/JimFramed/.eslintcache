[{"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js":"1","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js":"2","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js":"3","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js":"4","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx":"5","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx":"6","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx":"7","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx":"8","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js":"9"},{"size":517,"mtime":1611515395166,"results":"10","hashOfConfig":"11"},{"size":922,"mtime":1611515395163,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1611515395166,"results":"13","hashOfConfig":"11"},{"size":199,"mtime":1611515395164,"results":"14","hashOfConfig":"11"},{"size":3584,"mtime":1611515395166,"results":"15","hashOfConfig":"11"},{"size":5219,"mtime":1611515395165,"results":"16","hashOfConfig":"11"},{"size":1076,"mtime":1611515395165,"results":"17","hashOfConfig":"11"},{"size":2486,"mtime":1611515395165,"results":"18","hashOfConfig":"11"},{"size":615,"mtime":1611515395167,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1pefiyx",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\index.js",[],["43","44"],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\App.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\reportWebVitals.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\api\\request.js",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\pages\\ImageGridContainer.jsx",["45","46"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport ImageGrid from '../components/ImageGrid';\r\nimport ImageNav from '../components/ImageNav';\r\nimport ImageViewer from '../components/ImageViewer';\r\n\r\nconst ImageGridContainer = ({data}) => {\r\n    const [imageData, setImageData] = useState([]);\r\n    const [filterIndex, setFilterIndex] = useState(0);\r\n    const [type, setType] = useState('all');\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [showViewer, setShowViewer] = useState(false);\r\n    const [viewerSrc, setViewerSrc] = useState({})\r\n    const [viewerIndex, setViewerIndex] = useState(0);\r\n\r\n    const filters = [\r\n        {\r\n            label: 'Home',\r\n            value: 0    \r\n        },\r\n        {\r\n            label: 'Top 50',\r\n            value: 1,\r\n            key: 'score'\r\n        },\r\n        {\r\n            label: 'Latest 50',\r\n            value: 2,\r\n            key: 'date'\r\n        }\r\n    ]\r\n\r\n    const handleFilterChange = (filter) => {\r\n        setFilterIndex(filter.value);\r\n    }\r\n\r\n    const handleTypeChange = (type) => {\r\n        setType(type);\r\n    }\r\n\r\n    const handleSearchChange = (keyword) => {\r\n        setSearchTerm(keyword)\r\n    }\r\n\r\n    const handleImageClick = (image) => {\r\n        const matchesIndex = (element) => element.id === image.id;\r\n        const index = imageData.findIndex(matchesIndex)\r\n\r\n        setViewerSrc(image);\r\n        setShowViewer(true);\r\n        setViewerIndex(index);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShowViewer(false);\r\n    }\r\n\r\n    const searchData = (data) => {\r\n        if (searchTerm?.length < 3) {\r\n            return data;\r\n        }\r\n\r\n        const results = data.filter((obj) => {\r\n            return Object.keys(obj).reduce((acc, curr) => {\r\n                return acc || obj[curr].toString().toLowerCase().includes(searchTerm);\r\n            }, false);\r\n        });\r\n\r\n        return results;\r\n    }\r\n\r\n    const filterImages = (images) => {\r\n        let results;\r\n\r\n        const key = filters[filterIndex].key;\r\n        const sortMethod = (a,b) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0)\r\n\r\n        // apply filters\r\n        if (filterIndex === 0) {\r\n            results = images;\r\n        } else {\r\n            results = images.sort(sortMethod).slice(0, 50);\r\n        } \r\n\r\n        if (type === 'Wide') {\r\n            results = results.filter(item => item.width >= item.height);\r\n        } else if (type === 'Portrait') {\r\n            results = results.filter(item => item.width <= item.height);\r\n        }\r\n\r\n        // apply search\r\n\r\n        return searchData(results);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (data.length) {\r\n            const images = filterImages(data.slice());\r\n\r\n            setImageData(images)\r\n        }\r\n    }, [data, filterIndex, type, searchTerm])\r\n\r\n    const container = document.querySelector('.image-grid');\r\n\r\n    return (\r\n        <div style={{ margin: '0 auto'}} className=\"home\">\r\n            <ImageNav \r\n                filters={filters}\r\n                updateFilter={handleFilterChange} \r\n                updateType={handleTypeChange}\r\n                updateSearch={handleSearchChange}\r\n            />\r\n            {imageData && container && (\r\n                <ImageGrid images={imageData} rowTargetHeight={300} container={container} onClick={handleImageClick}/>\r\n            )}\r\n            <ImageViewer \r\n                image={viewerSrc} \r\n                show={showViewer} \r\n                onClose={handleClose} \r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ImageGridContainer;","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageGrid.jsx",["47"],"import useWindowDimensions from '../utils/utils';\r\n\r\nconst ImageGrid = ({\r\n        className, \r\n        images, \r\n        rowTargetHeight = 400, \r\n        borderOffset = 5, \r\n        container,\r\n        onClick\r\n    }) => {\r\n\r\n    let { maxWidth } = useWindowDimensions(container);\r\n\r\n    const processImages = () => {\r\n        const processedImages = [];\r\n\r\n        for (let i = 0; i < images.length; i++) {\r\n            let width = parseInt(images[i].width);\r\n            const height = parseInt(images[i].height);\r\n            width = width * (rowTargetHeight / height); \r\n\r\n            const image = {\r\n                'id': images[i].id,\r\n                'author': images[i].author,\r\n                'authorsAvatarUrl': images[i].authorsAvatarUrl,\r\n                'data': images[i].date,\r\n                'gameName': images[i].gameName,\r\n                'score': images[i].score,\r\n                'fullWidth': images[i].width,\r\n                'fullHeight': images[i].height,\r\n                'shotUrl': images[i].shotUrl,\r\n                'thumbnailUrl': images[i].thumbnailUrl,\r\n                'width': width,\r\n                'height': rowTargetHeight,\r\n            }\r\n\r\n            processedImages.push(image);\r\n        }\r\n\r\n        return processedImages;\r\n    }\r\n\r\n    const makeSmaller = (image, amount) => {\r\n        amount = amount || 1;\r\n\r\n        const newHeight = image.height - amount;\r\n        image.width = (image.width * (newHeight / image.height));\r\n        image.height = newHeight;\r\n\r\n\r\n        return image;\r\n    };\r\n\r\n    const getCumulativeWidth = (images) => {\r\n        let width = 0;\r\n\r\n        for(let i = 0; i < images.length; i++) {\r\n            width += images[i].width;\r\n        }\r\n\r\n        width += (images.length-1) * borderOffset;\r\n\r\n        return width;\r\n    };\r\n\r\n    const buildRows = () => {\r\n        let currentRow = 0;\r\n        let currentWidth = 0;\r\n        let imageCounter = 0;\r\n        const rows = [];\r\n        const processedImages = processImages();\r\n\r\n        while(processedImages[imageCounter]) {\r\n            if(currentWidth >= maxWidth) {\r\n                currentRow++;\r\n                currentWidth = 0;\r\n            }\r\n            if(!rows[currentRow]) {\r\n                rows[currentRow] = [];\r\n            }\r\n\r\n            rows[currentRow].push(processedImages[imageCounter]);\r\n            currentWidth += processedImages[imageCounter].width;\r\n\r\n            imageCounter++;\r\n        };\r\n\r\n        return rows;\r\n    }\r\n\r\n    const normalizeImage = (image) => {\r\n        image.width =  parseInt(image.width);\r\n        image.height = parseInt(image.height);\r\n\r\n        return image;\r\n    };\r\n\r\n    const normalizeImages = (images) => {\r\n        for(let i = 0; i < images.length; i++) {\r\n            normalizeImage(images[i]);\r\n        }\r\n\r\n        return images;\r\n    };\r\n\r\n    const fitImagesInRow = (images) => {\r\n        while(getCumulativeWidth(images) > maxWidth) {\r\n            for(let i = 0; i < images.length; i++) {\r\n                images[i] = makeSmaller(images[i]);\r\n            }\r\n        };\r\n\r\n        return images;\r\n    }\r\n\r\n    const renderGrid = (rows) => {\r\n        return (\r\n        <div className={className}>\r\n            {rows.map((row, index) => {\r\n                return (\r\n                    <div \r\n                        key={index} \r\n                        className=\"image-row\" \r\n                    >\r\n                        {row.map((image, imageIndex) => {\r\n                            return (\r\n                                <img \r\n                                    key={imageIndex} \r\n                                    src={image.thumbnailUrl} \r\n                                    style={{\r\n                                        marginRight: borderOffset,\r\n                                        marginBottom: borderOffset,\r\n                                        width: Math.ceil(image.width), \r\n                                        height:image.height,\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => onClick(image, imageIndex)} \r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n        );\r\n    };\r\n\r\n    const buildGrid = () => {\r\n        const rows = buildRows();\r\n\r\n        for(let i = 0; i < rows.length; i++) {\r\n            rows[i] = fitImagesInRow(rows[i]);\r\n\r\n            rows[i] = normalizeImages(rows[i]);\r\n\r\n            const difference = (maxWidth - getCumulativeWidth(rows[i]));\r\n            const amountOfImages = rows[i].length;\r\n\r\n            if(amountOfImages > 1 && difference < 10) {\r\n                const addToEach = difference / amountOfImages;\r\n                for(let n = 0; n < rows[i].length; n++) {\r\n                    rows[i][n].width += addToEach;\r\n                }\r\n\r\n                rows[i] = normalizeImages(rows[i]);\r\n\r\n\r\n                rows[i][rows[i].length-1].width += (maxWidth - getCumulativeWidth(rows[i]));\r\n            }\r\n        }\r\n\r\n        return renderGrid(rows)\r\n    }\r\n\r\n    return buildGrid();\r\n}\r\n\r\nexport default ImageGrid;","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageViewer.jsx",["48","49"],"import React, {useState} from 'react';\r\nimport classNames from 'classnames';\r\n\r\nconst ImageViewer = ({image = {}, show, onClose}) => {\r\n\r\n    const visibleClass = show ? 'is-visible' : undefined;\r\n\r\n    return (\r\n        <div className={classNames('image-viewer', visibleClass)} onClick={onClose}> \r\n            <div className=\"image-viewer-content\">\r\n                {image && (\r\n                    <>\r\n                        <img src={image.shotUrl} onClick={(event) => {event.stopPropagation();}}/>\r\n                        <div className=\"author\" onClick={(event) => {event.stopPropagation();}}>\r\n                            {/* <img src={image.authorsAvatarUrl} alt=\"avatar\" /> */}\r\n                            <div><span>by</span> <strong>{image.author}</strong></div>\r\n                            <div className=\"title\">{image.gameName}</div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <button className=\"close\" onClick={onClose}></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageViewer;","C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\components\\ImageNav.jsx",[],"C:\\MyProjects\\VS.NET Projects\\GitHub\\FransBouma\\Hall-of-framed\\WIPs\\JimFramed\\src\\utils\\utils.js",["50"],"import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions(container) {\r\n  const maxWidth = container.clientWidth;\r\n  \r\n  return {\r\n    maxWidth\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions(container) {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions(container));\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions(container));\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":14,"column":12,"nodeType":"57","messageId":"58","endLine":14,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":102,"column":8,"nodeType":"61","endLine":102,"endColumn":45,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":127,"column":33,"nodeType":"65","endLine":138,"endColumn":35},{"ruleId":"55","severity":1,"message":"66","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":24},{"ruleId":"63","severity":1,"message":"64","line":13,"column":25,"nodeType":"65","endLine":13,"endColumn":99},{"ruleId":"59","severity":1,"message":"67","line":21,"column":6,"nodeType":"61","endLine":21,"endColumn":8,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'viewerIndex' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterImages'. Either include it or remove the dependency array.","ArrayExpression",["71"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'container'. Either include it or remove the dependency array. If 'setWindowDimensions' needs the current value of 'container', you can also switch to useReducer instead of useState and read 'container' in the reducer.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [data, filterIndex, type, searchTerm, filterImages]",{"range":"77","text":"78"},"Update the dependencies array to be: [container]",{"range":"79","text":"80"},[2785,2822],"[data, filterIndex, type, searchTerm, filterImages]",[578,580],"[container]"]